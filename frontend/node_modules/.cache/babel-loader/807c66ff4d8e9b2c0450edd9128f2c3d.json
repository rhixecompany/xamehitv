{"ast":null,"code":"import axios from \"axios\";\nimport { returnErrors } from \"./messages\";\nimport { USER_LOADED, USER_LOADING, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT_SUCCESS, REGISTER_SUCCESS, REGISTER_FAIL } from \"./types\"; // CHECK TOKEN & LOAD USER\n\nexport const loadUser = () => (dispatch, getState) => {\n  // User Loading\n  dispatch({\n    type: USER_LOADING\n  });\n  axios.get(\"/api/auth/user\", tokenConfig(getState)).then(res => {\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  }).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status));\n    dispatch({\n      type: AUTH_ERROR\n    });\n  });\n}; // LOGIN USER\n\nexport const login = (username, password) => dispatch => {\n  // Headers\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }; // Request Body~\n\n  const body = JSON.stringify({\n    username,\n    password\n  });\n  axios.post(\"/api/auth/login\", body, config).then(res => {\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n  }).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status));\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  });\n}; // REGISTER USER\n\nexport const register = _ref => {\n  let {\n    username,\n    password,\n    email\n  } = _ref;\n  return dispatch => {\n    // Headers\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }; // Request Body\n\n    const body = JSON.stringify({\n      username,\n      email,\n      password\n    });\n    axios.post(\"/api/auth/register\", body, config).then(res => {\n      dispatch({\n        type: REGISTER_SUCCESS,\n        payload: res.data\n      });\n    }).catch(err => {\n      dispatch(returnErrors(err.response.data, err.response.status));\n      dispatch({\n        type: REGISTER_FAIL\n      });\n    });\n  };\n}; // LOGOUT USER\n\nexport const logout = () => (dispatch, getState) => {\n  axios.post(\"/api/auth/logout\", null, tokenConfig(getState)).then(res => {\n    dispatch({\n      type: \"CLEAR_MANGAS\"\n    });\n    dispatch({\n      type: LOGOUT_SUCCESS\n    });\n  }).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status));\n  });\n}; // Setup config with token - helper function\n\nexport const tokenConfig = getState => {\n  // Get token from state\n  const token = getState().auth.token; // Headers\n\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }; // If token, add to headers config\n\n  if (token) {\n    config.headers[\"Authorization\"] = `Token ${token}`;\n  }\n\n  return config;\n};","map":{"version":3,"names":["axios","returnErrors","USER_LOADED","USER_LOADING","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT_SUCCESS","REGISTER_SUCCESS","REGISTER_FAIL","loadUser","dispatch","getState","type","get","tokenConfig","then","res","payload","data","catch","err","response","status","login","username","password","config","headers","body","JSON","stringify","post","register","email","logout","token","auth"],"sources":["/home/bot/Desktop/dev/projects/xamehi-tv/frontend/src/actions/auth.js"],"sourcesContent":["import axios from \"axios\";\nimport { returnErrors } from \"./messages\";\n\nimport {\n  USER_LOADED,\n  USER_LOADING,\n  AUTH_ERROR,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  LOGOUT_SUCCESS,\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n} from \"./types\";\n\n// CHECK TOKEN & LOAD USER\nexport const loadUser = () => (dispatch, getState) => {\n  // User Loading\n  dispatch({ type: USER_LOADING });\n\n  axios\n    .get(\"/api/auth/user\", tokenConfig(getState))\n    .then((res) => {\n      dispatch({\n        type: USER_LOADED,\n        payload: res.data,\n      });\n    })\n    .catch((err) => {\n      dispatch(returnErrors(err.response.data, err.response.status));\n      dispatch({\n        type: AUTH_ERROR,\n      });\n    });\n};\n\n// LOGIN USER\nexport const login = (username, password) => (dispatch) => {\n  // Headers\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n\n  // Request Body~\n  const body = JSON.stringify({ username, password });\n\n  axios\n    .post(\"/api/auth/login\", body, config)\n    .then((res) => {\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: res.data,\n      });\n    })\n    .catch((err) => {\n      dispatch(returnErrors(err.response.data, err.response.status));\n      dispatch({\n        type: LOGIN_FAIL,\n      });\n    });\n};\n\n// REGISTER USER\nexport const register =\n  ({ username, password, email }) =>\n  (dispatch) => {\n    // Headers\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    };\n\n    // Request Body\n    const body = JSON.stringify({ username, email, password });\n\n    axios\n      .post(\"/api/auth/register\", body, config)\n      .then((res) => {\n        dispatch({\n          type: REGISTER_SUCCESS,\n          payload: res.data,\n        });\n      })\n      .catch((err) => {\n        dispatch(returnErrors(err.response.data, err.response.status));\n        dispatch({\n          type: REGISTER_FAIL,\n        });\n      });\n  };\n\n// LOGOUT USER\nexport const logout = () => (dispatch, getState) => {\n  axios\n    .post(\"/api/auth/logout\", null, tokenConfig(getState))\n    .then((res) => {\n      dispatch({ type: \"CLEAR_MANGAS\" });\n      dispatch({\n        type: LOGOUT_SUCCESS,\n      });\n    })\n    .catch((err) => {\n      dispatch(returnErrors(err.response.data, err.response.status));\n    });\n};\n\n// Setup config with token - helper function\nexport const tokenConfig = (getState) => {\n  // Get token from state\n  const token = getState().auth.token;\n\n  // Headers\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n\n  // If token, add to headers config\n  if (token) {\n    config.headers[\"Authorization\"] = `Token ${token}`;\n  }\n\n  return config;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}